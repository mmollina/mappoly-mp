// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vs_multiallelic_Rcpp
List vs_multiallelic_Rcpp(List PH, List GENO, NumericMatrix pedigree);
RcppExport SEXP _mappolymp_vs_multiallelic_Rcpp(SEXP PHSEXP, SEXP GENOSEXP, SEXP pedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type PH(PHSEXP);
    Rcpp::traits::input_parameter< List >::type GENO(GENOSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pedigree(pedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(vs_multiallelic_Rcpp(PH, GENO, pedigree));
    return rcpp_result_gen;
END_RCPP
}
// vs_biallelic_Rcpp
List vs_biallelic_Rcpp(List PH, IntegerMatrix G, NumericMatrix pedigree);
RcppExport SEXP _mappolymp_vs_biallelic_Rcpp(SEXP PHSEXP, SEXP GSEXP, SEXP pedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type PH(PHSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pedigree(pedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(vs_biallelic_Rcpp(PH, G, pedigree));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP calc_genoprob_multi_fam(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP est_hmm_map(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_mappolymp_vs_multiallelic_Rcpp", (DL_FUNC) &_mappolymp_vs_multiallelic_Rcpp, 3},
    {"_mappolymp_vs_biallelic_Rcpp", (DL_FUNC) &_mappolymp_vs_biallelic_Rcpp, 3},
    {"calc_genoprob_multi_fam", (DL_FUNC) &calc_genoprob_multi_fam,  8},
    {"est_hmm_map",             (DL_FUNC) &est_hmm_map,             10},
    {NULL, NULL, 0}
};

RcppExport void R_init_mappolymp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
